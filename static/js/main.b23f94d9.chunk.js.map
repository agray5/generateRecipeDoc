{"version":3,"sources":["Components/ImageInput.js","RecipeForm/Form.js","utils/index.js","RecipeForm/index.js","App.js","reportWebVitals.js","theme/index.js","index.js"],"names":["withStyles","theme","root","width","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","imgPreview","maxWidth","withTheme","prop","useState","preview","setpreview","onDrop","useCallback","files","Object","assign","previewUrl","URL","createObjectURL","resolve","useDropzone","accept","maxFiles","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","acceptedFiles","ref","classes","RootRef","rootRef","className","length","src","alt","RecipeForm","this","props","handleChange","handleImg","handleSubmit","values","onSubmit","Grid","container","justify","spacing","item","xs","ImageInput","direction","FormControl","fullWidth","InputLabel","htmlFor","Input","id","onChange","value","TextField","label","rows","multiline","variant","helperText","Button","type","React","Component","exportDef","getHeightAndWidthFromDataUrl","dataURL","Promise","img","Image","onload","height","state","title","ing","instructions","desc","event","setState","target","a","arrayBuffer","data","utils","extension","name","split","pop","preventDefault","generateDocument","alignItems","Card","card","Form","bind","docValues","fetch","process","file","onTemplateChosen","text","template","createReport","parseData","cmdDelimiter","report","saveable","Blob","saveAs","output","map","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","background","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b23f94d9.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { RootRef } from '@material-ui/core'\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"calc(100%-20px)\",\r\n    padding: 20,\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: \"#eeeeee\",\r\n    borderStyle: \"dashed\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#bdbdbd\",\r\n    outline: \"none\",\r\n    transition: \"border .24s ease-in-out\",\r\n  },\r\n  imgPreview: {\r\n    maxWidth: \"100%\"\r\n  }\r\n});\r\n\r\nfunction MyDropzone(prop) {\r\n  const [preview, setpreview] = useState([]);\r\n  const onDrop = useCallback(files => {\r\n    setpreview(Object.assign(files[0], {\r\n      previewUrl: URL.createObjectURL(files[0])\r\n    }));\r\n    prop.resolve(files);\r\n  }, [])\r\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles } = useDropzone({\r\n    onDrop, accept: 'image/png,image/gif,image/jpg,image/jpeg,image/svg', maxFiles: 1\r\n  });\r\n  const { ref, ...rootProps } = getRootProps();\r\n  const { classes } = prop;\r\n\r\n  return (\r\n    <RootRef rootRef={ref}>\r\n      <div {...getRootProps()} className={classes.root}>\r\n        <input {...getInputProps()} />\r\n        {\r\n          acceptedFiles.length ?\r\n            <img\r\n              src={preview.previewUrl}\r\n              alt=\"Recipe\"\r\n              className={classes.imgPreview}\r\n            /> : (\r\n              isDragReject ?\r\n                <p>File cannot be used</p> :\r\n                (isDragActive ?\r\n                  <p>Drop the files here ...</p> :\r\n                  <div>\r\n                    <p>Drag 'n' drop some files here, or click to select files</p>\r\n                    <em>(Only *.jpeg and *.png images will be accepted)</em>\r\n                  </div>\r\n                )\r\n            )\r\n        }\r\n      </div>\r\n    </RootRef>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(MyDropzone);","import React from \"react\"\r\nimport { FormControl, InputLabel, Input, TextField, Grid, Button } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ImageInput from \"../Components/ImageInput\"\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: \"4rem\",\r\n  }\r\n});\r\n\r\nclass RecipeForm extends React.Component {\r\n\r\n\r\n  render() {\r\n    const { classes, handleChange, handleImg, handleSubmit, values } = this.props;\r\n\r\n    return (\r\n      <form className={classes.root} onSubmit={handleSubmit}>\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          spacing={5}\r\n        >\r\n          <Grid item xs={4} >\r\n            <ImageInput resolve={handleImg} />\r\n            <p>Can't generate doc without image</p>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            spacing={3}\r\n            xs={8} \r\n          >\r\n            <Grid item>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor=\"title\">Recipe Title</InputLabel>\r\n                <Input id=\"title\" onChange={handleChange} value={values[\"title\"]}  fullWidth/>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <FormControl fullWidth>\r\n                <InputLabel htmlFor=\"type\">Recipe Type</InputLabel>\r\n                <Input id=\"type\" onChange={handleChange} value={values[\"type\"]} fullWidth/>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                id=\"desc\"\r\n                label=\"Recipe Description\"\r\n                rows={4}\r\n                multiline\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                value={values[\"desc\"]}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                id=\"ing\"\r\n                label=\"Recipe Ingrediants\"\r\n                rows={4}\r\n                multiline\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                value={values[\"ing\"]}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                id=\"instructions\"\r\n                label=\"Recipe instructions\"\r\n                rows={4}\r\n                multiline\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                value={values[\"instructions\"]}\r\n                helperText=\"Put each step on a new line.\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Button type=\"submit\" value=\"Submit\" color=\"primary\" variant=\"contained\">Generate recipe doc</Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(RecipeForm);","const getHeightAndWidthFromDataUrl = dataURL => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = () => {\r\n    resolve({\r\n      height: img.height,\r\n      width: img.width\r\n    })\r\n  }\r\n  img.src = dataURL\r\n});\r\n\r\nconst exportDef =  ({\r\n  getHeightAndWidthFromDataUrl\r\n})\r\n\r\nexport default exportDef","import React from \"react\"\r\nimport { Grid, Card } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { saveAs } from \"file-saver\";\r\nimport createReport from 'docx-templates';\r\nimport Form from \"./Form\"\r\nimport utils from \"../utils/index\"\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    width: \"100%\"\r\n  }\r\n});\r\n\r\n\r\nclass RecipeForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { values: { title: \"\", type: \"\", ing: \"\", instructions: \"\", desc: \"\" } };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ values: { ...this.state.values, [event.target.id]: event.target.value } })\r\n  }\r\n\r\n  async handleImg(files) {\r\n    const data = await files[0].arrayBuffer();\r\n    const { width, height } = await utils.getHeightAndWidthFromDataUrl(files[0].previewUrl);\r\n    this.setState({ values: { ...this.state.values, img: { data: data, extension: \".\" + files[0].name.split('.').pop(), width: width * 0.026458, height: height * 0.026458 } } })\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    generateDocument(this.state.values);\r\n  }\r\n\r\n  render() {\r\n    const { classes, ...rest } = this.props;\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Card className={classes.card}>\r\n          <Form\r\n            values={this.state.values}\r\n            handleChange={this.handleChange.bind(this)}\r\n            handleImg={this.handleImg.bind(this)}\r\n            handleSubmit={this.handleSubmit.bind(this)}\r\n          />\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nasync function generateDocument(docValues) {\r\n  const file = await fetch(process.env.PUBLIC_URL + \"/temp.docx\");\r\n  const data = await file.arrayBuffer();\r\n  onTemplateChosen(data, docValues);\r\n}\r\n\r\n// Create downloadable docx\r\nconst onTemplateChosen = async (text, data) => {\r\n  const template = text;\r\n  const report = await createReport({\r\n    template,\r\n    data: {\r\n      ...parseData(data)\r\n    },\r\n    cmdDelimiter: ['{', '}'],\r\n  });\r\n  const saveable = new Blob([report], { type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" });\r\n  saveAs(saveable, \"report.docx\")\r\n};\r\n\r\n// Process recipe data from form\r\nconst parseData = (data) => {\r\n  const output = Object.assign({}, data);\r\n\r\n  // Turn steps into an array\r\n  if (output.instructions) {\r\n    output.instructions = output.instructions.split(/\\r?\\n/).map(text => ({ text: text }));\r\n  }\r\n  else output.instructions = [\"\"];\r\n\r\n  return output;\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(RecipeForm);","import { Component } from \"react\";\r\nimport './App.css';\r\nimport { Container } from '@material-ui/core';\r\nimport RecipeForm from \"./RecipeForm/index\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <RecipeForm/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from \"./theme\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}